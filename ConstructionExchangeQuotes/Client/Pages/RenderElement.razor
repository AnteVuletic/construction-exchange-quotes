@using ConstructionExchangeQuotes.Shared
@inject HttpClient Http 

@if (_elementInEdit != null) {
    <Modal Title="Edit element" OnClose="CancelEdit" ShouldRenderButtons="false">
        <ElementCreateEdit ElementInEdit="_elementInEdit" OnElementEditCancaled="CancelEdit" OnElementEdited="InvokeRefresh" />
    </Modal>
}

<div class="card">
    <h5 class="card-header d-flex justify-content-between w-100">
        <span>@Element.Name</span>
        <span>
            <button type="button" class="btn btn-outline-primary" @onclick="() => _elementInEdit = Element.CloneObject()" ><span class="oi oi-pencil"></span></button>
            <button type="button" class="btn btn-outline-danger" @onclick="DeleteElement"><span class="oi oi-trash"></span></button>
        </span>
    </h5>
    <div class="card-body">
        <div class="card-text">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Rate</th>
                        <th>Category</th>
                        <th>Type</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @Element.Rate $
                        </td>
                        <td>
                            @Element.ElementCategory.Name
                        </td>
                        <td>
                            @Element.ElementType.Name
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <ul class="list-group">
        @foreach (var elementField in Element.ElementFields)
        {
            <li class="list-group-item">@elementField.Name - @elementField.Value</li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public ElementDto Element { get; set; }

    [Parameter]
    public EventCallback RefreshElements { get; set; }

    private ElementDto _elementInEdit;

    async Task DeleteElement()
    {
        await Http.DeleteAsync($"element/delete-element/{Element.Id}");
        await InvokeRefresh();
    }

    async Task InvokeRefresh()
    {
        if (RefreshElements.HasDelegate)
        {
            await RefreshElements.InvokeAsync(null);
        }
    }

    async Task CancelEdit()
    {
        _elementInEdit = null;
        await InvokeRefresh();
    }
}
