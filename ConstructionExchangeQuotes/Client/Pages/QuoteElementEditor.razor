@using ConstructionExchangeQuotes.Shared
@using System.Net.Http
@using Radzen.Blazor 
@inject HttpClient Http

@code {
    [Parameter]
    public QuoteElementDto QuoteElement { get; set; }
    [Parameter]
    public List<ElementDto> ForbiddenElements { get; set; }
    [Parameter]
    public EventCallback<QuoteElementDto> OnElementFieldDeleted { get; set; }
    [Parameter]
    public EventCallback OnChange { get; set; }
    [Parameter]
    public bool IsFirst { get; set; }

    private ElementDto selectedElement;
    private List<ElementDto> availableElements = new List<ElementDto>();

    private async Task FetchElements()
    {
        availableElements = new List<ElementDto>();
        var allElements = await Http.GetFromJsonAsync<IList<ElementDto>>("element/get");

        availableElements = allElements.Where(e => !ForbiddenElements.Any(fe => fe.Id == e.Id)).ToList();
    }

    protected override async Task OnInitializedAsync() =>
        await FetchElements();

    public void DeleteItem()
    {
        if (OnElementFieldDeleted.HasDelegate)
        {
            OnElementFieldDeleted.InvokeAsync(QuoteElement);
        }
    }

    public void HandleUpdateElement(object objectId)
    {
        if (objectId is int id)
        {
            //if(args.Value.ToString() == "none")
            //{
            //    QuoteElement.ElementId = 0;
            //    QuoteElement.Element = null;
            //    QuoteElement.Amount = 0;
            //}
            QuoteElement.ElementId = id;
            QuoteElement.Element = availableElements.FirstOrDefault(qe => qe.Id == QuoteElement.ElementId);
            QuoteElement.Amount = 1;

            if (OnChange.HasDelegate)
            {
                OnChange.InvokeAsync(null);
            }
        }
    }

    public void HandleAmountChange(ChangeEventArgs args)
    {
        var isParseSuccessful = int.TryParse(args.Value.ToString(), out int value);

        if (isParseSuccessful &&
            value >= 0)
        {
            QuoteElement.Amount = value;
        }

        if (OnChange.HasDelegate)
        {
            OnChange.InvokeAsync(null);
        }
    }
}

<div class="form-group">
    <div class="container">
        @if (IsFirst)
        {
        <div class="row">
            <label for="name" class="col-6">Name</label>
            <label for="amount" class="col-2">Amount</label>
            <label for="rate" class="col-1">Rate</label>
            <label for="sum" class="col-2">Sum</label>
            <label class="col-1"></label>
        </div>
        }
    <div class="row">
        <RadzenDropDown AllowClear="false" TValue="int" Data="@availableElements" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" FilterOperator="Radzen.StringFilterOperator.StartsWith" AllowFiltering="true" ValueProperty="Id" Change="@(args => HandleUpdateElement(args))"/>
        <input type="number" for="amount" value="@QuoteElement.Amount" class="col-2" @onchange="HandleAmountChange"/>
        <p for="rate" class="col-1">$@QuoteElement.Element.Rate</p>
        <p for="sum" class="col-2">$@(QuoteElement.Element.Rate * QuoteElement.Amount)</p>
        <button type="button" class="close col-1" aria-label="Close" @onclick="DeleteItem">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    </div>
</div>