@page "/element/create"

@inject HttpClient Http
@using ConstructionExchangeQuotes.Shared

<EditForm Model="@_elementDto" OnValidSubmit="SaveElement">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h4>Add Element</h4>
    <div class="form-group">
        <label for="name">Element name</label>
        <InputText id="name" @bind-Value="_elementDto.Name" class="form-control" />
        <label for="rate" class="mt-2">Rate</label>
        <InputNumber id="rate" @bind-Value="_elementDto.Rate" class="form-control" />
    </div>
    <div class="form-group">
        <label for="category">Category</label>
        <InputSelect id="category" @bind-Value="@_categoryId" class="form-control">
            <option value="">None</option>
            @foreach (var elementCat in _elementCategories)
            {
                <option value="@elementCat.Id">@elementCat.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="type">Type</label>
        <InputSelect id="type" @bind-Value="@_elementTypeId" class="form-control">
            <option value="">None</option>
            @foreach (var elementType in _elementTypes)
            {
                <option value="@elementType.Id">@elementType.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="element-fields" class="d-block">Element fields</label>
        @foreach (var elementField in _elementDto.ElementFields)
        {
            <ElementFieldEditor ElementField="elementField" OnElementFieldDeleted="ElementFieldDeleted" IsFirst="_elementDto.ElementFields.First() == elementField"/>
        }
        <button type="button" class="btn btn-primary w-100 d-block" @onclick="AddElementField">Add element field</button>
    </div>
    <div class="d-flex w-100 justify-content-center">
        <button type="submit" class="btn btn-primary">Create</button>
    </div>
</EditForm>

@code {
    private ElementDto _elementDto = new ElementDto();
    private ICollection<ElementCategoryDto> _elementCategories = new List<ElementCategoryDto>();
    private ICollection<ElementTypeDto> _elementTypes = new List<ElementTypeDto>();
    private string _categoryId = string.Empty;
    private string _elementTypeId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _elementCategories = await Http.GetFromJsonAsync<ICollection<ElementCategoryDto>>("element/get-categories");
        _elementTypes = await Http.GetFromJsonAsync<ICollection<ElementTypeDto>>("element/get-element-types");
    }

    void ElementFieldDeleted(ElementFieldDto elementField)
    {
        _elementDto.ElementFields.Remove(elementField);
    }

    void AddElementField()
    {
        _elementDto.ElementFields.Add(new ElementFieldDto());
    }

    async Task SaveElement()
    {
        _elementDto.ElementCategory = _elementCategories.Single(x => x.Id == int.Parse(_categoryId));
        _elementDto.ElementType = _elementTypes.Single(x => x.Id == int.Parse(_elementTypeId));
        await Http.PostAsJsonAsync("element/add-element", _elementDto);
        _categoryId = string.Empty;
        _elementTypeId = string.Empty;
        _elementDto = new ElementDto();
    }
}
