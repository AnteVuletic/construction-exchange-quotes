@page "/category"
@using ConstructionExchangeQuotes.Shared
@inject HttpClient Http

@if (_elementCategoryInEdit != null)
{
    <Modal Title="Edit element category" OnClose="CancelElementCategoryEdit" OnConfirm="OnConfirmEditCategory" ShouldRenderButtons="false">
        <EditForm Model="@_elementCategoryInEdit" OnValidSubmit="OnConfirmEditCategory" class="mb-5">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="name">Name</label>
                <InputText id="name" @bind-Value="_elementCategoryInEdit.Name" class="form-control" />
            </div>
            <div class="d-flex w-100 justify-content-around">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-danger" @onclick="CancelElementCategoryEdit">Cancel</button>
            </div>
        </EditForm>
    </Modal>
}

<EditForm Model="@_elementCategory" OnValidSubmit="CreateCategory" class="mb-5">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h4>Add category type</h4>
    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="_elementCategory.Name" class="form-control" />
    </div>
    <div class="d-flex w-100 justify-content-center">
        <button type="submit" class="btn btn-primary">Create</button>
    </div>
</EditForm>

<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var elementType in _elementCategories)
        {
            <tr>
                <th scope="row">@elementType.Id</th>
                <td>@elementType.Name</td>
                <td>
                    <button class="btn btn-danger" @onclick="async () => await DeleteCategory(elementType.Id)">Delete</button>
                    <button class="btn btn-secondary" @onclick="() => _elementCategoryInEdit = elementType.CloneObject()">Edit</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private ElementCategoryDto _elementCategory = new ElementCategoryDto();
    private IList<ElementCategoryDto> _elementCategories = new List<ElementCategoryDto>();
    private ElementCategoryDto _elementCategoryInEdit;

    protected override async Task OnInitializedAsync()
    {
        await InitializeCategories();
    }

    public async Task InitializeCategories()
    {
        _elementCategories = await Http.GetFromJsonAsync<IList<ElementCategoryDto>>("element/get-categories");
    }

    public async Task CreateCategory()
    {
        await Http.PostAsJsonAsync("element/add-category", _elementCategory);

        _elementCategory = new ElementCategoryDto();
        await this.InitializeCategories();
    }

    public async Task DeleteCategory(int? id)
    {
        await Http.DeleteAsync($"element/delete-category/{id.Value}");
        await InitializeCategories();
    }

    async Task OnConfirmEditCategory()
    {
        await Http.PostAsJsonAsync($"element/edit-category", _elementCategoryInEdit);
        _elementCategoryInEdit = null;
        await InitializeCategories();
    }

    void CancelElementCategoryEdit()
    {
        _elementCategoryInEdit = null;
    }
}
