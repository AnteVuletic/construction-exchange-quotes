@using ConstructionExchangeQuotes.Shared

@code{
    [Parameter]
    public QuoteDto Quote { get; set; }
    [Parameter]
    public EventCallback Refetch { get; set; }

    private bool isExpanded = false;
    private bool isArchiveModalOpen = false;
    private double total;

    protected override void OnInitialized() =>
        total = Quote.SubTotal + (Quote.SubTotal / Quote.TaxRatePercentage);
}

@if (isArchiveModalOpen)
{
    <PromptModal Title="Archive quote"
                 Description="Are you sure you want to archive this quote?"
                 OnClose="@(() => isArchiveModalOpen = false)"
                 OnConfirm="@(async() => await Refetch.InvokeAsync(null))" />
}

<div class="quote__tile">
    <div class="tile__header" @onclick="@(() => isExpanded = !isExpanded)">
        <div class="tile__header__column">
            <div>Date created: @Quote.DateCreated</div>
            @if (Quote.CustomerEmail != null)
            {
                <div>Date created: @Quote.DateCreated</div>
            }
        </div>
        <div class="tile__header__column">
            <div>
                Subtotal: @Quote.SubTotal
                <button type="button" class="close" aria-label="Close" @onclick="@(() => isArchiveModalOpen = true)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div>Tax rate: @Quote.TaxRatePercentage%</div>
            <div>Total: @total</div>
        </div>
    </div>
    @if (isExpanded)
    {
        <div class="tile__content">
            @foreach (var quoteElement in Quote.QuoteElements)
            {
                <div class="tile__content__item">
                    <div>@quoteElement.Element.Name</div>
                    <div>$@quoteElement.Element.Rate</div>
                </div>
            }
        </div>
    }
</div>